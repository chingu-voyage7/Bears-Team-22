swagger: "2.0"

## INFO PROJECT ##

info:
  description: "Swagger documentation for [Knowledge](https://github.com/chingu-voyage7/Bears-Team-22)."
  version: "1.0.0"
  title: "Knowledge API"
  license:
    name: "MIT"
    url: "https://github.com/chingu-voyage7/Bears-Team-22/blob/master/license"

## TAG FOR EACH ROUTE ##
tags:
  - name: "post"
    description: "Do CRUD operations on posts"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "tag"
    description: "Do CRUD operations on tags"
  - name: "user"
    description: "Create, modify, read, remove and authenticate users"
  - name: "lookup"
    description: "Custom searches"

## ALL THE ROUTES ARE LISTED IN THIS SECTION - THEY  ARE SORTED BASED ON THE TAG PROPERTY
paths:
  #################################################################
  ##################            POST             ##################
  #################################################################
  /post/create:
    post:
      tags:
        - "post"
      summary: Creates a new post
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: Post to create
          schema:
            type: object
            required:
              - body
            properties:
              title:
                type: string
              body:
                type: string
              isQuestion:
                type: boolean
              superPostId:
                type: string
              tags:
                type: array
                items:
                  type: string
            example:
              isQuestion: true
              title: "myTitle"
              body: "this is the body of my post"
              tags: ["tag1", "tag2"]
            #   body: "this is the body of my post"
            #   tags: ['tag1', 'tag2']
            #   superPostId: 'a8df73324ndsa9f8'
      produces:
        - application/json
      responses:
        201:
          description: Post created
          examples:
            application/json:
              isQuestion: true
              tags:
                - children: []
                  _id: 5c1672b171616a001af4f800
                  name: tag1
                  __v: 0
                - children: []
                  _id: 5c1672b171616a001af4f801
                  name: tag2
                  __v: 0
              replyId: null
              _id: 5c168750e1d5bf0014e5a926
              title: myTitle
              body: this is the body of my post
              authorId: 5c07a5a54a9d0c0012cd8b35
              createdAt: "2018-12-16T17:11:44.595Z"
              updatedAt: "2018-12-16T17:11:44.595Z"
        500:
          description: Invalid input / Server error
          examples:
            application/json:
              error:
                errors:
                  body:
                    message: Path `body` is required.
                    name: ValidatorError
                    properties:
                      message: Path `body` is required.
                      type: required
                      path: body
                    kind: required
                    path: body
                _message: Post validation failed
                message: "Post validation failed: body: Path `body` is required."
                name: ValidationError
  /post/get-all:
    get:
      tags:
        - "post"
      summary: Get latest posts
      parameters:
        - in: query
          name: num
          type: integer
          default: 0
          minimum: 0
          maximum: 50
          description: The number of post to be collected
      produces:
        - application/json
      responses:
        200:
          description: Array of posts
          examples:
            application/json:
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...

        500:
          description: Server error
          #################################################################
          ##################            USER             ##################
          #################################################################

  /user/register:
    post:
      tags:
        - "user"
      summary: Creates a new user
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: User to create
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
            example:
              name: "test test"
              email: "test@test.com"
              password: "p4$$w0rd"
      produces:
        - application/json
      responses:
        201:
          description: User created
          examples:
            application/json:
              name: test test
              email: test@test.com
        500:
          description: Invalid input / Server error
          examples:
            application/json:
              errors:
                email:
                  message: Path `email` is required.
                  name: ValidatorError
                  properties:
                    message: Path `email` is required.
                    type: required
                    path: email
                  kind: required
                  path: email
              _message: User validation failed
              message: "User validation failed: email: Path `email` is required."
              name: ValidationError
  /user/get-all:
    get:
      tags:
        - "user"
      summary: Get registered user
      parameters:
        - in: query
          name: num
          type: integer
          default: 0
          minimum: 0
          maximum: 50
          description: The number of users to be fetched
      produces:
        - application/json
      responses:
        200:
          description: Array of users
          examples:
            application/json:
              - name: test test
                # ...
              - name: test toast
                # ...
              - name: toast test
                # ...
              - name: toast toast
                # ...
              - name: tost tist
                # ...

        500:
          description: Server error
          #################################################################
          ##################            LOOKUPS          ##################
          #################################################################

  /lookup/questions:
    post:
      tags:
        - "lookup"
      summary: Return questions which contains the provided tags
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: Array of tags to filter search
          schema:
            type: array
            items:
              type: string
            required:
              - tags
            properties:
              tags:
                type: array
                items:
                  type: string
            example:
              name: ["tag1", "tag2"]
      produces:
        - application/json
      responses:
        200:
          description: Array of posts
          examples:
            application/json:
              name: test test
              email: test@test.com
        500:
          description: Invalid input / Server error
          examples:
            application/json:
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...

  /lookup/thread/{id}:
    get:
      tags:
        - "lookup"
      summary: Get the list of the posts belonging to a thread
      parameters:
        - in: path
          required: true
          name: id
          type: string
          description: The id of the question ( the first postof the thread)
      produces:
        - application/json
      responses:
        200:
          description: Array of posts
          examples:
            application/json:
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...
        500:
          description: Server error

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Post:
    type: object
    properties:
      id:
        type: string
      isQuestion:
        type: boolean
        default: false
      title:
        type: string
      body:
        type: string
      replyId:
        type: string
        default: null
      tags:
        type: array
        items:
          type: string
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
