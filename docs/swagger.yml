swagger: "2.0"

info:
  description: Swagger documentation for [Knowledge](https://github.com/chingu-voyage7/Bears-Team-22).
  version: 1.0.0
  title: Knowledge API
  license:
    name: MIT
    url: https://github.com/chingu-voyage7/Bears-Team-22/blob/master/license

tags:
  - name: auth
    description: Authorization-related end-points
  - name: user
    description: Collect user info
  - name: content
    description: Create and get various types of content
  - name: tag
    description: Create, verify and query tags

paths:
  # Auth routes
  /auth/login:
      get:
        security:
          - ApiKeyAuth: # Actually a token we use as an api key
              in: body  
              name: idToken
        tags:
          - auth
        summary: Log a user in
        parameters:
          - in: body
            name: idToken
            description: The firebase token that identify a user
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  format: ObjectId
              example:
                  idToken: "asdfa9OJPXZda6f#23@$Â£fsdASDD"
        consumes:
          - application/json
        produces:
          - application/json
        responses:
          200:
            description: Token decoded and validated successfully
            schema:
                $ref: "#/definitions/User"
            examples:
              application/json:
                loggedUser:
                  _id: 5c4b592fe871040017a2f656
                  firebaseId: FQzIcPQHtghRO7OwAaI4yddjweH2
                  name: test-eer
                  email: test@test.testa

                
          400:
            description: Missing body
            examples:
              application/json:
                {}
          500:
            description: Generic server error
            examples:
              application/json:
                code: auth/argument-error
                message: First argument to verifyIdToken() must be a Firebase ID token string.

  /auth/logout:
    get:
      tags:
        - auth
      summary: Log a user out removing the cookie
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        204:
          description: Cookie removed successfully
  # User routes
  /user/current-user:
    get:
      tags:
        - user
      summary: Collect profile informations of the authenticated user
      consumes:
        - application/json
      security:
        - cookieAuth:
            name: session 
      produces:
        - application/json
      responses:
        200:
          description: Information received successfully
          schema:
              $ref: "#/definitions/User"
          examples:
            application/json:
              user:
                iss: https://session.firebase.google.com/react-firebase-85039
                aud: react-firebase-85039
                auth_time: 1549444696
                user_id: FQzIcPQHtghRO7OwAaI4yddjweH2
                sub: FQzIcPQHtghRO7OwAaI4yddjweH2
                iat: 1549444697
                exp: 1549462697
                email: test@test.testa
                email_verified: false
                firebase:
                  identities:
                    email:
                    - test@test.testa
                  sign_in_provider: password
                uid: FQzIcPQHtghRO7OwAaI4yddjweH2
                mongoInstance:
                  _id: 5c4b592fe871040017a2f656
                  firebaseId: FQzIcPQHtghRO7OwAaI4yddjweH2
                  name: test-eer
                  email: test@test.testa
                  __v: 0
        401:
          description: Invalid / missing credentials
          examples:
            application/json:
              message: Unauthorized
  # Content routes
  /content/create:
    post:
      tags:
        - content
      summary: Creates  new content ( question / reply)
      consumes:
        - application/json
      security:
        - cookieAuth:
            name: session 
      parameters:
        - in: body
          name: body
          description: The properties of the question to create.
          schema:
            type: object
            required:
              - title
              - body
              - type
            properties:
              title:
                type: string
              body:
                type: string
              authorId:
                type: string
              tags:
                type: array
                items:
                  type: string
            example:
                title: "Question Title"
                body: "This is the body of the question"
                tags:	["Eta"]
                type:	question
      produces:
        - application/json
      responses:
        201:
          description: The question created in the database
          schema:
            $ref: "#/definitions/Question"
          examples:
            application/json:
              _id: 5c168750e1d5bf0014e5a926
              createdAt: "2019-02-06T09:47:27.482Z"
              updatedAt: "2019-02-06T09:47:27.482Z"
              body: This is the body of the question
              authorId: 5c07a5a54a9d0c0012cd8b35
              replyId: null
              tags: ["5c544d295aa8ea001036bb0d"]
              title: Question Title
              type: Question
        400:
          description: Invalid input
          examples:
            application/json:
              message: "Invalid content type"
        401:
          description: Invalid / missing credentials
          examples:
            application/json:
              message: Unauthorized
        422:
          description: Unprocessable entity
          examples:
            application/json:
              validationErrors:
                isJoi: true
                name: ValidationError
                details:
                - message: '"body" is required'
                  path:
                  - body
                  type: any.required
                  context:
                    key: body
                    label: body
                _object:
                  title: Question Title
                  tags:
                  - Eta
                  type: question
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Internal server error: couldn't fulfill the request at the current time"

  # Search routes
  /search:
    get:
      tags:
        - content
      summary: Search the content of the website and find items matching a given query
      parameters:
        - in: query
          name: tags
          type: array
          description: The returned question tags
        - in: query
          name: q
          type: string
          default: "sort:latest"
          description: The query to use for matching questions.
      produces:
        - application/json
      responses:
        200:
          description: Found questions matching the given query
          schema:
            $ref: "#/definitions/Question"
          examples:
            application/json:
              result:
              - tags:
                - _id: 5c544d295aa8ea001036bb0d
                  name: Eta
                type: Question
                _id: 5c5aad2f8e385b0010b193fa
                title: "Question Title"
                body: "This is the body of the question"
                authorId:
                  _id: "5c4b592fe871040017a2f656"
                  name: "test-eer"
                  email: "test@test.testa"
                createdAt: '2019-02-06T09:47:27.482Z'
                updatedAt: '2019-02-06T09:47:27.482Z'
              stemmedWords: []
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Network error"

  # Thread routes
  /thread/{questionId}:
    get:
      tags:
        - "content"
      summary: Get the full question and replies in a thread
      parameters:
        - in: path
          required: true
          name: questionId
          type: string
          format: ObjectId
          description: The ObjectId of the question that is the root content of the thread.
      produces:
        - application/json
      responses:
        200:
          description: The question and its replies
          schema:
            $ref: "#/definitions/Thread"
          examples:
            application/json:
              thread:
                replies:
                - type: Reply
                  _id: 5c5ab76b358a810010b5b185
                  body: This is a reply longer than 20 char
                  authorId:
                    _id: 5c4b592fe871040017a2f656
                    name: test-eer
                    email: test@test.testa
                  questionId: 5c5aad2f8e385b0010b193fa
                  createdAt: '2019-02-06T10:31:07.274Z'
                  updatedAt: '2019-02-06T10:31:07.274Z'
                _id: 5c5aad2f8e385b0010b193fb
                question:
                  tags:
                  - _id: 5c544d295aa8ea001036bb0d
                    name: Eta
                  type: Question
                  _id: 5c5aad2f8e385b0010b193fa
                  title: Am i here?
                  body: Yes you are! tuentyyyyyyyyyyyyyyyyyyy
                  authorId:
                    _id: 5c4b592fe871040017a2f656
                    name: test-eer
                    email: test@test.testa
                  createdAt: '2019-02-06T09:47:27.482Z'
                  updatedAt: '2019-02-06T09:47:27.482Z'
        500:
          description: Internal server error
          examples:
            application/json:
              message: Cast to ObjectId failed for value "5c5aad2f8e85b0010b193fa" at path "question"
                for model "Thread"
              name: CastError
              stringValue: '"5c5aad2f8e85b0010b193fa"'
              kind: ObjectId
              value: 5c5aad2f8e85b0010b193fa
              path: question

  # Tag routes
  /tag/browse/{tagname}:
    get:
      tags:
        - "tag"
      summary: Get questions tagged with the given tag
      consumes:
        - application/json
      parameters:
        - in: path
          required: true
          name: tagName
          type: string
          description: The string used to collect the matching tag (the first one) to query questions for.
      produces:
        - application/json
      responses:
        200:
          description: Array of matching questions
          schema:
            type: array
            items:
              $ref: "#/definitions/Question"
          examples:
            application/json:
              questions:
                - tags:
                  - _id: 5c544d295aa8ea001036bb0e
                    name: frank
                  - _id: 5c544d295aa8ea001036bb0f
                    name: fourth
                  type: Question
                  _id: 5c544d295aa8ea001036bb27
                  title: This is the fourth title
                  body: This is the fourth body
                  authorId:
                    _id: 5c544d295aa8ea001036bb07
                    name: frank
                    email: frank@test.com
                  createdAt: '2019-02-01T13:44:09.549Z'
                  updatedAt: '2019-02-01T13:44:09.549Z'
                - tags:
                  - _id: 5c544d295aa8ea001036bb09
                    name: first
                  - _id: 5c544d295aa8ea001036bb0e
                    name: frank
                  type: Question
                  _id: 5c544d295aa8ea001036bb24
                  title: This is the first title
                  body: This is the first body
                  authorId:
                    _id: 5c544d295aa8ea001036bb07
                    name: frank
                    email: frank@test.com
                  createdAt: '2019-02-01T13:44:09.548Z'
                  updatedAt: '2019-02-01T13:44:09.548Z'
        500:
          description: Internal server error
          examples:
            application/json:
              error: "Internal server error: couldn't fulfill the request at the current time."
  
  /tag/tags/{query}:
    get:
      tags:
        - "tag"
      summary: Get first 5 tags matching the query string
      consumes:
        - application/json
      parameters:
        - in: path
          required: true
          name: query
          type: string
          description: The string used to collect 5 matchings tags
      produces:
        - application/json
      responses:
        200:
          description: Array of matching tags
          schema:
            type: array
            items:
              $ref: "#/definitions/Tag"
          examples:
            application/json:
              tags:
              - _id: 5c544d295aa8ea001036bb0a
                name: Beta
              - _id: 5c544d295aa8ea001036bb0d
                name: Eta
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Internal server error: couldn't fulfill the request at the current time."

# Models
definitions:

  Model:
    type: object
    required:
      - id
      - createdAt
      - updatedAt
    properties:
      id:
        type: string
        format: ObjectId
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

  Content:
    allOf:
      - $ref: "#/definitions/Model" # Inherit everything from the Model definition
      - required:
        - body
        - authorId
      - properties:
          body:
            type: string
          authorId:
            type: string
            format: ObjectId

  Question:
    allOf:
      - $ref: "#/definitions/Content" # Inherit everything from the Content definition
      - required:
        - title
      - properties: # Extra properties specifically for questions
          title:
            type: string
          tags:
            type: array
            items:
              type: string
              format: ObjectId

  Reply:
    allOf:
      - $ref: "#/definitions/Content" # Inherit everything from the Content definition
      - required:
        - questionId
      - properties: # Extra properties specifically for replies
          questionId:
            type: string
            format: ObjectId

  Thread:
    type: object
    required:
      - id
      - createdAt
      - updatedAt
    properties:
      question:
        $ref: "#/definitions/Question"
      replies:
        type: array
        items:
          $ref: "#/definitions/Reply"

  User:
    allOf:
      - $ref: "#/definitions/Model" # Inherit everything from the Model definition
      - required:
        - email
      - properties:
          name:
            type: string
          email:
            type: string
            format: email
          firebaseId:
            type: string
            format: ObjectId

  Tag:
    allOf:
      - $ref: "#/definitions/Model" # Inherit everything from the Model definition
      - required:
        - name
      - properties:
          name:
            type: string
