swagger: "2.0"

info:
  description: "Swagger documentation for [Knowledge](https://github.com/chingu-voyage7/Bears-Team-22)."
  version: "1.0.0"
  title: "Knowledge API"
  license:
    name: "MIT"
    url: "https://github.com/chingu-voyage7/Bears-Team-22/blob/master/license"

tags:
  - name: "post"
    description: "Create and get the latest posts"
  - name: "tag"
    description: "Create, verify and query tags"
  - name: "user"
    description: "Create, modify, read, remove and authenticate users"
  - name: "thread"
    description: "Do operations on threads"

paths:

  # Post routes
  /post/create:
    post:
      tags:
        - "post"
      summary: Create a new post
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: Post to create
          schema:
            type: object
            required:
              - body
            properties:
              title:
                type: string
              body:
                type: string
              isQuestion:
                type: boolean
              superPostId:
                type: string
              tags:
                type: array
                items:
                  type: string
            example:
              isQuestion: true
              title: "myTitle"
              body: "this is the body of my post"
              tags: ["tag1", "tag2"]
            #   superPostId: 'a8df73324ndsa9f8'
      produces:
        - application/json
      responses:
        201:
          description: Post
          schema:
            $ref: '#/definitions/Post'
          examples:
            application/json:
              isQuestion: true
              tags:
                - children: []
                  _id: 5c1672b171616a001af4f800
                  name: tag1
                  __v: 0
                - children: []
                  _id: 5c1672b171616a001af4f801
                  name: tag2
                  __v: 0
              replyId: null
              _id: 5c168750e1d5bf0014e5a926
              title: Post Title
              body: This is the body of the post
              authorId: 5c07a5a54a9d0c0012cd8b35
              createdAt: "2018-12-16T17:11:44.595Z"
              updatedAt: "2018-12-16T17:11:44.595Z"
        500:
          description: Invalid input / Server error
          examples:
            application/json:
              error: "Post validation failed: body: Path `body` is required."
  /post/latest:
    get:
      tags:
        - "post"
      summary: Get the latest questions
      parameters:
        - in: query
          name: num
          type: integer
          default: 10
          minimum: 0
          maximum: 50
          description: The desired amount of questions
      produces:
        - application/json
      responses:
        200:
          description: Array of posts
          examples:
            application/json:
              - isQuestion: true
                tags:
                  - children: []
                    _id: 5c1672b171616a001af4f800
                    name: tag1
                    __v: 0
                  - children: []
                    _id: 5c1672b171616a001af4f801
                    name: tag2
                    __v: 0
                replyId: null
                _id: 5c168750e1d5bf0014e5a926
                title: Post 1 Title
                body: "This is the body of post no. 1"
                authorId: 5c07a5a54a9d0c0012cd8b35
                createdAt: "2018-12-16T17:11:44.595Z"
                updatedAt: "2018-12-16T17:11:44.595Z"
              - isQuestion: true
                tags:
                  - children: []
                    _id: 5c1672b171616a001af4f802
                    name: tag3
                    __v: 0
                  - children: []
                    _id: 5c1672b171616a001af4f803
                    name: tag4
                    __v: 0
                replyId: null
                _id: 5c168750e1d5bf0014e5a927
                title: Post 2 Title
                body: "This is the body of post no. 2"
                authorId: 5c07a5a54a9d0c0012cd8b35
                createdAt: "2018-12-16T17:11:44.595Z"
                updatedAt: "2018-12-16T17:11:44.595Z"

        500:
          description: Server error

  # User routes
  /user/register:
    post:
      tags:
        - "user"
      summary: Register a new user
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: User to create
          schema:
            type: object
            required:
              - name
              - email
              - passwordHash
            properties:
              name:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
                format: sha512
            example:
              name: "test test"
              email: "test@test.com"
              password: "cbf0936369e8776d3647988d65f638d9c05169adbfe358b7b5f65b1915b1c7ff8581026928da92f1e7c02931c551e54a5715d876eb51af7f412b2669f9860e2c"
      produces:
        - application/json
      responses:
        201:
          description: User created
          examples:
            application/json:
              name: test test
              email: test@test.com
        500:
          description: Invalid input / Server error
          examples:
            application/json:
              errors:
                email:
                  message: Path `email` is required.
                  name: ValidatorError
                  properties:
                    message: Path `email` is required.
                    type: required
                    path: email
                  kind: required
                  path: email
              _message: User validation failed
              message: "User validation failed: email: Path `email` is required."
              name: ValidationError

  # Tag routes
  /tag/{tagId}:
    get:
      tags:
        - "tag"
      summary: Get questions tagged with the given tag
      consumes:
        - application/json
      parameters:
        - in: path
          required: true
          name: tagId
          type: string
          description: Tag to query questions for
      produces:
        - application/json
      responses:
        200:
          description: Array of posts
          examples:
            application/json:
              name: test test
              email: test@test.com
        500:
          description: Invalid input / Server error
          examples:
            application/json:
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...
              - isQuestion: false
                # ...
              - isQuestion: true
                # ...

  # Thread routes
  /thread/{questionId}:
    get:
      tags:
        - "thread"
      summary: Get a list of posts in a thread
      parameters:
        - in: path
          required: true
          name: questionId
          type: string
          description: The ObjectId of the root post (the question) in a thread
      produces:
        - application/json
      responses:
        200:
          description: Array of posts
          examples:
            application/json:
              - isQuestion: true
                title: "Question"
                body: "This is the body of the question"
                tags:
                - "tag1"
                - "tag2"
              - isQuestion: true
                title: "Comment #1"
                body: "This is the body of of the first reply in the thread"
                tags:
                - "tag3"
                - "tag4"
        500:
          description: Server error

# Models
definitions:
  Post:
    type: object
    properties:
      id:
        type: string
        format: "ObjectId"
      type:
        type: string
        enum:
          - question
          - reply
      title:
        type: string
      body:
        type: string
      replyId:
        type: string
        default: null
      tags:
        type: array
        items:
          type: string
          format: ObjectId
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  User:
    type: object
    properties:
      id:
        type: string
        format: ObjectId
      name:
        type: string
      email:
        type: string
        format: email
      passwordHash:
        type: string
        format: sha512
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  Tag:
    type: object
    properties:
      id:
        type: string
        format: ObjectId
      name:
        type: string
      status:
        type: string
        enum:
          - pending
          - approved
      children:
        type: array
        items:
          type: string
          format: ObjectId
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
